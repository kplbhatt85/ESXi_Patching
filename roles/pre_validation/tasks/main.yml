---
# pre_validation/tasks/main.yml
- name: Gather ESXi host facts
  community.vmware.vmware_host_facts:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    esxi_hostname: "{{ inventory_hostname }}"
    validate_certs: "{{ validate_certs }}"
  delegate_to: localhost
  register: host_facts

- name: Check if ESXi host is connected
  assert:
    that:
      - host_facts.ansible_facts.ansible_host_connection_state == "connected"
    fail_msg: "ESXi host {{ inventory_hostname }} is not connected."
    success_msg: "ESXi host {{ inventory_hostname }} is connected."

- name: Gather VMs on the ESXi host
  community.vmware.vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ validate_certs }}"
    esxi_hostname: "{{ inventory_hostname }}"
  delegate_to: localhost
  register: vm_info

- name: Gather DRS rules for the cluster
  community.vmware.vmware_drs_rule_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    cluster_name: "{{ cluster_name }}"
    validate_certs: "{{ validate_certs }}"
  delegate_to: localhost
  register: drs_rules_info

- name: Identify VMs affected by DRS rules
  set_fact:
    vms_with_drs_rules: >-
      {{
        vm_info.virtual_machines | selectattr('name', 'in',
        drs_rules_info.drs_rule_info[cluster_name] | map(attribute='rule_vms') | flatten | list) | list
      }}

- name: Display VMs with DRS rules
  debug:
    msg: "VM '{{ item.name }}' is affected by DRS rules."
  loop: "{{ vms_with_drs_rules }}"

- name: Enter maintenance mode
  community.vmware.vmware_maintenancemode:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    esxi_hostname: "{{ inventory_hostname }}"
    validate_certs: "{{ validate_certs }}"
    evacuate: true
    timeout: 600
    state: present
  delegate_to: localhost

- name: Verify ESXi host is in maintenance mode
  community.vmware.vmware_host_facts:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    esxi_hostname: "{{ inventory_hostname }}"
    validate_certs: "{{ validate_certs }}"
  delegate_to: localhost
  register: post_maintenance_host_facts

- name: Assert ESXi host is in maintenance mode
  assert:
    that:
      - post_maintenance_host_facts.ansible_facts.ansible_host_maintenance_mode == "true"
    fail_msg: "ESXi host {{ inventory_hostname }} failed to enter maintenance mode."
    success_msg: "ESXi host {{ inventory_hostname }} is in maintenance mode."
