---
# pre_validation/tasks/main.yml

- name: Gather ESXi host facts
  community.vmware.vmware_host_facts:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    esxi_hostname: "{{ inventory_hostname }}"
    validate_certs: "{{ validate_certs }}"
  delegate_to: localhost
  register: host_facts

- name: Check if ESXi host is connected
  assert:
    that:
      - host_facts.ansible_facts.ansible_host_connection_state == "connected"
    fail_msg: "ESXi host {{ inventory_hostname }} is not connected."
    success_msg: "ESXi host {{ inventory_hostname }} is connected."

- name: Gather VMs on the ESXi host
  community.vmware.vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ validate_certs }}"
  delegate_to: localhost
  register: vm_info

- name: Gather DRS rules for the cluster
  community.vmware.vmware_drs_rule_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    cluster_name: "{{ cluster_name }}"
    validate_certs: "{{ validate_certs }}"
  delegate_to: localhost
  register: drs_rules_info

- name: Identify VMs affected by DRS rules
  set_fact:
    vms_with_drs_rules: >-
      {{
        drs_rules_info.drs_rule_info[cluster_name]
        | map(attribute='rule_vms')
        | flatten
        | list
      }}

- name: Display VMs affected by each DRS rule
  debug:
    msg: "VMs affected by DRS rule '{{ item.rule_name }}': {{ item.rule_vms | join(', ') }}"
  loop: "{{ drs_rules_info.drs_rule_info[cluster_name] }}"
  loop_control:
    label: "{{ item.rule_name }}"
  when: drs_rules_info.drs_rule_info[cluster_name] | length > 0
  
- name: Notify when no DRS rules exist
  debug:
    msg: "No DRS rules found for cluster '{{ cluster_name }}'."
  when: drs_rules_info.drs_rule_info[cluster_name] | length == 0

- name: Enter maintenance mode
  vmware.vmware.esxi_maintenance_mode:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    name: "{{ inventory_hostname }}"
    validate_certs: "{{ validate_certs }}"
    enable_maintenance_mode: true
    evacuate: true
    timeout: 600
  delegate_to: localhost

- name: Verify ESXi host is in maintenance mode
  community.vmware.vmware_host_facts:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    esxi_hostname: "{{ inventory_hostname }}"
    validate_certs: "{{ validate_certs }}"
  delegate_to: localhost
  register: post_maintenance_host_facts

- name: Assert ESXi host is in maintenance mode
  ansible.builtin.assert:
    that:
      - post_maintenance_host_facts.ansible_facts.ansible_in_maintenance_mode
    fail_msg: "ESXi host {{ inventory_hostname }} failed to enter maintenance mode."
    success_msg: "ESXi host {{ inventory_hostname }} is confirmed in maintenance mode."
