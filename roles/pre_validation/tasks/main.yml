---
# roles/pre_validation/tasks/main.yml

############################################################################################
# Perform pre-validation checks on ESXi hosts - vCenter connection and DRS config validation
############################################################################################

# 1 - Validate connection state of the target vCenter server
- name: "Validate vCenter '{{ vcenter_hostname }}' connection ..."
  community.vmware.vmware_about_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ validate_certs }}"
    register: vcenter_info
    no_log: "{{ esxi_patch_no_log | default(true) }}"

- name: "Verify vCenter '{{ vcenter_hostname }}' connection state ..."
  ansible.builtin.assert:
    that:
    - vcenter_info.failed is not defined or not vcenter_info.failed
    fail_msg: "Failed to connect vCenter '{{ vcenter_hostname }}'"
    success_msg: "Connected to vCenter '{{ vcenter_hostname }}' successfully"

# 2 - Validate connection state of the ESXi host, gathers VM information like cluster and datacenter names
- name: "Gather ESXi host facts ..."
  community.vmware.vmware_host_facts:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    esxi_hostname: "{{ esxi_host }}"
    validate_certs: "{{ validate_certs }}"
    show_datacenter: true
    register: host_facts
    no_log: "{{ esxi_patch_no_log | default(true) }}"

- name: "Assert ESXi host connection state and datacenter/cluster membership"
  ansible.builtin.assert:
    that:
    - host_facts.ansible_host.host_connection_state == 'connected'
    fail_msg: "ESXi host '{{ esxi_host }}' is not connected to vCenter '{{ vcenter_hostname }}'"
    success_msg: "ESXi host '{{ esxi_host }}' is connected to vCenter '{{ vcenter_hostname }}'"

- name: "Set datacenter name from host facts"
  ansible.builtin.set_fact:
    datacenter_name: "{{ host_facts.ansible_facts.datacenter | default('') }}"

- name: "Verify ESXi host belongs to a datacenter"
  ansible.builtin.assert:
    that:
    - datacenter_name | length > 0
    fail_msg: "ESXi host '{{ esxi_host }}' is not part of any datacenter"
    success_msg: "ESXi host '{{ esxi_host }}' is part of datacenter '{{ datacenter_name }}'"

# 3 - Gather cluster name the target ESXi host belongs to
- name: "Gather list of all clusters in the datacenter '{{ datacenter_name }}' ..."
  community.vmware.vmware_cluster_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    datacenter: "{{ datacenter_name }}"
    validate_certs: "{{ validate_certs }}"
    register: all_clusters
    no_log: "{{ esxi_patch_no_log | default(true) }}"

- name: "Derive cluster name and (MoID) from host membership ..."
  ansible.builtin.set_fact:
    cluster_name: "{{ item.key }}"
    cluster_moid: "{{ item.value.moid }}"
  loop: "{{ all_clusters.clusters | dict2items }}"
  when: >-
    item.value.hosts is defined and
    esxi_host in (item.value.hosts | map(attribute='name') | list)
  no_log: "{{ esxi_patch_no_log | default(true) }}"

- name: "Verify the ESXi host belongs to a cluster"
  ansible.builtin.assert:
    that:
    - cluster_name is defined
    - cluster_name | length > 0
    fail_msg: "ESXi host '{{ esxi_host }}' is not a member of any cluster in datacenter '{{ datacenter_name }}'"
    success_msg: "ESXi host '{{ esxi_host }}' is member of cluster '{{ cluster_name }}' (MoID='{{ cluster_moid }}')"

# 4 - Validate cluster-wide DRS settings and per-VM overrides
- name: "Gather cluster details (DRS config + per-VM overrides) ..."
  community.vmware.vmware_cluster_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    datacenter: "{{ datacenter_name }}"
    cluster_name: "{{ cluster_name }}"
    schema: vsphere
    properties:
    - configurationEx
    validate_certs: "{{ validate_certs }}"
    register: cluster_info

- name: "Extract DRS flags and per-VM overrides ..."
  ansible.builtin.set_fact:
    cluster_drs_enabled: "{{ cluster_info.clusters[cluster_name].configurationEx.drsConfig.enabled | default(false) }}"
    cluster_drs_default: "{{ cluster_info.clusters[cluster_name].configurationEx.drsConfig.defaultVmBehavior | default('unknown') }}"
    manual_drs_vms: >-
      {{
        (
          cluster_info.clusters[cluster_name].configurationEx.drsVmConfig | default([])
          | selectattr('behavior', 'equalto', 'manual')
          | map(attribute='key.name')
          | list
        )
      }}
  when: cluster_info.clusters[cluster_name].configurationEx is defined

- name: "Assert cluster or VM-level DRS configuration ..."
  ansible.builtin.assert:
    that:
    - cluster_drs_enabled or (manual_drs_vms | length > 0) or (cluster_drs_default != 'unknown')
    fail_msg: "Neither cluster-wide DRS nor per-VM DRS automation is configured for cluster '{{ cluster_name }}'"
    success_msg: >-
      DRS is configured on cluster {{ cluster_name }}:
      Cluster-wide DRS={{ cluster_drs_enabled }},
      Default behaviour={{ cluster_drs_default }},
      Manual DRS VMs={{ (manual_drs_vms | join(', ') if manual_drs_vms | length > 0 else 'none') }}

# End of pre_validation_tasks/main.yml
